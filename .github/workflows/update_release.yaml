name: Update Releases

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch (adjust as necessary)

jobs:
  update-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get the latest release tag
        id: get_latest_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "Latest release tag: $latest_release"
          echo "latest_release=${latest_release}" >> $GITHUB_ENV

      - name: Fetch the latest release tag from remote
        if: env.latest_release != ''
        run: |
          git fetch origin refs/tags/${{ env.latest_release }}:refs/tags/${{ env.latest_release }}

      - name: Get changed files since latest release
        id: get_changes
        run: |
          if [ -n "${{ env.latest_release }}" ]; then
            changed_files=$(git diff --name-only ${{ env.latest_release }} HEAD)
            echo "Changed files since ${{ env.latest_release }}: $changed_files"
            echo "$changed_files" > changed_files.txt
            echo "Changed files since ${{ env.latest_release }}: $changed_files"
            echo "$changed_files" > changed_files.txt
          else
            echo "No latest release found"
            echo "" > changed_files.txt
          fi

      - name: Read changed files
        id: read_changed_files
        run: |
          changed_files=$(cat changed_files.txt)
          echo "changed_files=${changed_files}" >> $GITHUB_ENV
          
      - name: Upload changed files to the release
        if: steps.get_changes.outputs.changed_files != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while IFS= read -r folder; do
            archive="$folder.tar"
            if [ -f "$archive" ]; then
              echo "Uploading $archive to release ${{ env.latest_release }}"
              gh release upload ${{ env.latest_release }} "$archive" --clobber
            else
              echo "Archive $archive not found"
            fi
          done < changed_folders.txt