{
  "title": "API Gateway with a custom resource policy limiting responses to a date range",
  "description": "Creates an API Gateway REST endpoint with a resource policy. The resource policy contains a custom policy that limits access to the endpoint to certain date ranges.",
  "language": "Python",
  "level": "300",
  "framework": "SAM",
  "introBox": {
    "headline": "How it works",
    "text": [
      "Using resource policies, this endpoint will only accept requests between certain dates. This is just an example of many conditions that can be applied to limit access to API Gateway endpoints with resource policies"
    ]
  },
  "gitHub": {
    "template": {
      "repoURL": "https://github.com/aws-samples/serverless-patterns/tree/main/apigw-custom-resource-policy",
      "templateURL": "serverless-patterns/apigw-custom-resource-policy",
      "projectFolder": "apigw-custom-resource-policy"
    }
  },
  "resources": {
    "bullets": [
      {
        "text": "API Gateway resource policy statements",
        "link": "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-resourcepolicystatement.html"
      },
      {
        "text": "Resource policy condition operators",
        "link": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html"
      },
      {
        "text": "Resource policy condition keys",
        "link": "https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies-aws-condition-keys.html"
      }
    ]
  },
  "deploy": {
    "text": [
      "sam deploy"
    ]
  },
  "testing": {
    "text": [
      "See the Github repo for detailed testing instructions."
    ]
  },
  "cleanup": {
    "text": [
      "Delete the stack: <code>sam delete</code>."
    ]
  },
  "authors": [
    {
      "name": "Eric Johnson",
      "image": "https://serverlessland.com/assets/images/resources/ericdj.jpg",
      "bio": "Eric Johnson is a Principal Developer Advocate for Serverless Applications at Amazon Web Services and is based in Northern Colorado. Eric is a fanatic about serverless and enjoys helping developers understand how serverless technologies introduces a major paradigm shift in how they approach building and running applications at massive scale with minimal administration overhead. Prior to this, Eric has worked as a developer, solutions architect and AWS Evangelist for an AWS partner company.",
      "linkedin": "singledigit",
      "twitter": "edjgeek"
    }
  ]
}
