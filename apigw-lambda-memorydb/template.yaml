AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (uksb-1tthgi812) (tag:apigw-lambda-memorydb)
  lambda-memorydb
  Sample SAM Template which creates MemoryDB cluster along with the VPC, Subnets, Security Groups and a Java Lambda function which can access the memory db cluster

Globals:
  Function:
    Runtime: java8
    MemorySize: 512
    Timeout: 900

Resources:
  memdbClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 30.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName","vpc" ] ]
  privateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref memdbClusterVPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: 30.0.1.0/23
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName","privatesubnet-a" ] ]
  privateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref memdbClusterVPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: 30.0.2.0/23
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName","privatesubnet-b" ] ]
  memoryDBClusterSubnetGroup:
    Type: AWS::MemoryDB::SubnetGroup
    Properties:
      Description: MemoryDB cluster Subnet-group
      SubnetGroupName: my-memdb-private-subnetgroup
      SubnetIds:
        - !Ref privateSubnetA
        - !Ref privateSubnetB
  memoryDBClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MemoryDB cluster access
      VpcId: !Ref memdbClusterVPC
  lambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lambda access
      VpcId: !Ref memdbClusterVPC
  lambdaSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      GroupId:
        Fn::GetAtt:
          - lambdaSG
          - GroupId
      IpProtocol: -1
  memoryDBSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
          - memoryDBClusterSG
          - GroupId
      IpProtocol: tcp
      ToPort: 6379
      FromPort: 6379
      SourceSecurityGroupId: !Ref lambdaSG
  memoryDBSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow all outbound traffic
      CidrIp: 0.0.0.0/0
      GroupId:
        Fn::GetAtt:
          - memoryDBClusterSG
          - GroupId
      IpProtocol: -1
  memoryDBCluster:
    Type: AWS::MemoryDB::Cluster
    Properties:
      ClusterName: my-memorydb-cluster
      Description: Redis cluster
      EngineVersion: 6.2
      ACLName: open-access
      NodeType: db.t4g.small
      NumReplicasPerShard: 2
      NumShards: 2
      SecurityGroupIds:
        - !Ref memoryDBClusterSG
      SubnetGroupName: !Ref memoryDBClusterSubnetGroup
      TLSEnabled: true
  HelloWorldAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: hello-world-api-gateway
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: HelloWorldFunction
      Handler: helloworld.App::handleRequest
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref HelloWorldAPIGateway
        CreateItem:
          Type: Api
          Properties:
            Path: /hello
            Method: POST
            RestApiId: !Ref HelloWorldAPIGateway
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt lambdaSG.GroupId
        SubnetIds:
          - !GetAtt privateSubnetA.SubnetId
          - !GetAtt privateSubnetB.SubnetId
      Environment:
        Variables:
          ClusterAddress: !GetAtt memoryDBCluster.ClusterEndpoint.Address
Outputs:
  MyClusterVPC:
    Description: The VPC ID value
    Value: !Ref memdbClusterVPC
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${HelloWorldAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn

