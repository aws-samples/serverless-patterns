{
  "openapi": "3.0.1",
  "info": {
    "title": "SampleApiGatewayLambda",
    "version": "1.0.0"
  },
  "security": [
    {
      "cognito-authorizer": []
    }
  ],
  "paths": {
    "/order": {
      "post": {
        "summary": "Create order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreationInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "AWS_PROXY",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
          "passthroughBehavior": "when_no_match",
          "timeoutInMillis": 29000
        }
      }
    },
    "/order/{orderId}": {
      "get": {
        "summary": "Get order by ID",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "AWS_PROXY",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
          "passthroughBehavior": "when_no_match",
          "timeoutInMillis": 29000
        }
      },
      "put": {
        "summary": "Update order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "AWS_PROXY",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
          "passthroughBehavior": "when_no_match",
          "timeoutInMillis": 29000
        }
      },
      "delete": {
        "summary": "Delete order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Order deleted successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "AWS_PROXY",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
          "passthroughBehavior": "when_no_match",
          "timeoutInMillis": 29000
        }
      }
    },
    "/orders/search": {
      "post": {
        "summary": "Search orders",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSearchCriteria"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "integer" },
                        "pages": { "type": "integer" },
                        "currentPage": { "type": "integer" },
                        "limit": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid search criteria"
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "AWS_PROXY",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${searchLambdaArn}/invocations",
          "passthroughBehavior": "when_no_match"
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cognito-authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "x-amazon-apigateway-authorizer": {
          "type": "cognito_user_pools",
          "providerARNs": [
            "arn:aws:cognito-idp:${region}:${accountId}:userpool/${userPoolId}"
          ]
        }
      }
    },
    "schemas": {
      "Address": {
        "type": "object",
        "required": ["street", "city", "state", "postalCode", "country"],
        "properties": {
          "street": {
            "type": "string",
            "description": "Street address including house number"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "apartment": {
            "type": "string",
            "description": "Apartment, suite, or unit number"
          }
        }
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "CONFIRMED",
          "PROCESSING",
          "SHIPPED",
          "DELIVERED",
          "CANCELLED"
        ],
        "description": "The current status of the order"
      },
      "ShippingMethod": {
        "type": "string",
        "enum": ["STANDARD", "EXPRESS", "NEXT_DAY"],
        "description": "Available shipping methods for orders"
      },
      "PaymentMethod": {
        "type": "string",
        "enum": ["CREDIT_CARD", "DEBIT_CARD", "PAYPAL", "BANK_TRANSFER"]
      },
      "OrderItem": {
        "type": "object",
        "required": ["productId", "quantity", "price"],
        "properties": {
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1
          },
          "price": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "sku": {
            "type": "string"
          },
          "variantId": {
            "type": "string",
            "description": "ID for specific product variant (size, color, etc.)"
          }
        }
      },
      "OrderCreationInput": {
        "type": "object",
        "required": [
          "items",
          "shippingAddress",
          "billingAddress"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "minItems": 1
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "shippingMethod": {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          "customerNotes": {
            "type": "string",
            "maxLength": 500
          },
          "giftWrapping": {
            "type": "boolean",
            "default": false
          },
          "couponCode": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCreationInput"
          },
          {
            "type": "object",
            "required": ["customerId", "orderId", "status", "createdAt"],
            "properties": {
              "customerId": {
                "type": "string"
              },
              "orderId": {
                "type": "string",
                "readOnly": true
              },
              "status": {
                "$ref": "#/components/schemas/OrderStatus",
                "readOnly": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "estimatedDeliveryDate": {
                "type": "string",
                "format": "date"
              },
              "trackingNumber": {
                "type": "string"
              },
              "shippingCost": {
                "type": "number",
                "format": "float",
                "minimum": 0
              },
              "discountAmount": {
                "type": "number",
                "format": "float",
                "minimum": 0
              }
            }
          }
        ]
      },
      "OrderUpdate": {
        "type": "object",
        "properties": {
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "shippingMethod": {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          "customerNotes": {
            "type": "string",
            "maxLength": 500
          }
        }
      },
      "OrderSearchCriteria": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20
          },
          "sortBy": {
            "type": "string",
            "enum": ["createdAt", "status"],
            "default": "createdAt"
          },
          "sortOrder": {
            "type": "string",
            "enum": ["asc", "desc"],
            "default": "desc"
          }
        }
      }
    }
  },
  "x-amazon-apigateway-request-validators": {
    "basic": {
      "validateRequestBody": true,
      "validateRequestParameters": true
    }
  },
  "x-amazon-apigateway-request-validator": "basic"
}
