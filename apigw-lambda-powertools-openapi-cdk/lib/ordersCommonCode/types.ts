/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OrderCreationInput"];
                };
            };
            responses: {
                /** @description Order created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the order to retrieve */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update order */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the order to update */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OrderUpdate"];
                };
            };
            responses: {
                /** @description Order updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete order */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the order to delete */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search orders */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OrderSearchCriteria"];
                };
            };
            responses: {
                /** @description Successful search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Order"][];
                            pagination?: {
                                total?: number;
                                pages?: number;
                                currentPage?: number;
                                limit?: number;
                            };
                        };
                    };
                };
                /** @description Invalid search criteria */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Address: {
            /** @description Street address including house number */
            street: string;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            /** @description Apartment, suite, or unit number */
            apartment?: string;
        };
        /**
         * @description The current status of the order
         * @enum {string}
         */
        OrderStatus: "PENDING" | "CONFIRMED" | "PROCESSING" | "SHIPPED" | "DELIVERED" | "CANCELLED";
        /**
         * @description Available shipping methods for orders
         * @enum {string}
         */
        ShippingMethod: "STANDARD" | "EXPRESS" | "NEXT_DAY";
        /** @enum {string} */
        PaymentMethod: "CREDIT_CARD" | "DEBIT_CARD" | "PAYPAL" | "BANK_TRANSFER";
        OrderItem: {
            productId: string;
            productName?: string;
            quantity: number;
            /** Format: float */
            price: number;
            sku?: string;
            /** @description ID for specific product variant (size, color, etc.) */
            variantId?: string;
        };
        OrderCreationInput: {
            items: components["schemas"]["OrderItem"][];
            shippingAddress: components["schemas"]["Address"];
            billingAddress: components["schemas"]["Address"];
            paymentMethod?: components["schemas"]["PaymentMethod"];
            shippingMethod?: components["schemas"]["ShippingMethod"];
            customerNotes?: string;
            /** @default false */
            giftWrapping: boolean;
            couponCode?: string;
        };
        Order: components["schemas"]["OrderCreationInput"] & {
            customerId: string;
            readonly orderId: string;
            readonly status: components["schemas"]["OrderStatus"];
            /** Format: date-time */
            readonly createdAt: string;
            /** Format: date */
            estimatedDeliveryDate?: string;
            trackingNumber?: string;
            /** Format: float */
            shippingCost?: number;
            /** Format: float */
            discountAmount?: number;
        };
        OrderUpdate: {
            shippingAddress?: components["schemas"]["Address"];
            shippingMethod?: components["schemas"]["ShippingMethod"];
            customerNotes?: string;
        };
        OrderSearchCriteria: {
            statuses?: components["schemas"]["OrderStatus"][];
            productIds?: string[];
            /** @default 1 */
            page: number;
            /** @default 20 */
            limit: number;
            /**
             * @default createdAt
             * @enum {string}
             */
            sortBy: "createdAt" | "status";
            /**
             * @default desc
             * @enum {string}
             */
            sortOrder: "asc" | "desc";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
