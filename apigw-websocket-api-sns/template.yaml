# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  (uksb-1tthgi812) (tag:apigw-websocket-api-sns)
  Serverless patterns - This template will help you to deploy API Gateway WebSocket API which validates input and invokes SNS topic

Parameters:
  ApiStageName:
    Description: Name of WebSocket API stage
    Type: String
    Default: production

Resources:
#######################################################
#   SNS topic - we need to configure the subscription after deployment
#######################################################
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AWS::StackName}-SNSTopic"

#######################################################
#   API Gateway
#######################################################
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-WebSocketApi"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - sendOrder

    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref ApiStageName
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi


#######################################################
#   Connect route 
#######################################################

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      RouteResponseSelectionExpression: '$default'
      OperationName: ConnectRoute
      Target: !Join 
        - /
        - - integrations
          - !Ref ConnectRouteIntegration

  ConnectRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: MOCK
      RequestTemplates:
        "200": '{"statusCode":200}'
      TemplateSelectionExpression: '200'
      PassthroughBehavior: 'WHEN_NO_MATCH'


  ConnectRouteResponse: 
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId: !Ref ConnectRoute
      ApiId: !Ref WebSocketApi
      RouteResponseKey: $default

  ConnectRouteIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties: 
      ApiId: !Ref WebSocketApi
      IntegrationId: !Ref ConnectRouteIntegration
      IntegrationResponseKey: /200/
      TemplateSelectionExpression: \$default
      ResponseTemplates:
        "200": '{"statusCode":, "message":"order initiated"}'
#######################################################
#   IAM role
#######################################################
  APIGWRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Action:
            - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Path: /
      Policies: 
        - PolicyName: SNSSFAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "sns:Publish"
                Resource:
                  - !Ref SNSTopic
#######################################################
#   Disconnect route 
#######################################################
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - -  integrations
          - !Ref DisconnectRouteIntegration

  DisconnectRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: MOCK
      RequestTemplates:
        "200": '{"statusCode":200}'
      TemplateSelectionExpression: '200'
      PassthroughBehavior: 'WHEN_NO_MATCH'

  DisconnectRouteIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties: 
      ApiId: !Ref WebSocketApi
      IntegrationId: !Ref DisconnectRouteIntegration
      IntegrationResponseKey: /200/
      TemplateSelectionExpression: \$default

#######################################################
#   sendOrder route 
#######################################################
  sendOrder:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref WebSocketApi
      RouteKey: sendOrder
      AuthorizationType: NONE
      ModelSelectionExpression: $request.body.action
      RequestModels:
        sendOrder: orderModel
      Target: !Join
        - /
        - - integrations
          - !Ref sendOrderRouteIntegration

  sendOrderRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
      CredentialsArn: !Sub "${APIGWRole.Arn}"
      IntegrationMethod: POST
      ContentHandlingStrategy: CONVERT_TO_TEXT
      RequestParameters: 
        integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
      RequestTemplates: 
        '$default': 
          Fn::Sub: |
            #set ( $name = $input.path('$.Name')) 
            #set ($lastname =$input.path('$.SirName'))
            #set ($phone =$input.path('$.Number'))
            #set( $dq = '"')
            Action=Publish&TopicArn=$util.urlEncode("${SNSTopic}")&Message=$util.urlEncode("{
            ${!dq}connectionId${!dq}: ${!dq}${!context.connectionId}${!dq},
            ${!dq}requestTimeEpoch${!dq}: ${!context.requestTimeEpoch},
            ${!dq}Name${!dq}: ${!dq}$name${!dq},
            ${!dq}LastName${!dq}:${!dq}$lastname${!dq},
            ${!dq}Phone${!dq}: ${!dq}$phone${!dq}
            }")
      TemplateSelectionExpression: request.body.action

  sendOrderRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId: !Ref sendOrder
      ApiId: !Ref WebSocketApi
      RouteResponseKey: $default

  sendOrderRouteIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties: 
      ApiId: !Ref WebSocketApi
      IntegrationId: !Ref sendOrderRouteIntegration
      IntegrationResponseKey: $default

  foodOrderModel:
    Type: AWS::ApiGatewayV2::Model
    Properties:
      ApiId: !Ref WebSocketApi
      ContentType: application/json
      Description: this model helps us to ensure that all the required parameters are passed on to the SNS topic
      Name: orderModel
      Schema: 
        $schema: http://json-schema.org/draft-04/schema#
        title: orderInputModel
        type: object
        properties:
          Name: 
            type: string
          SirName:
            type: string
          Number:
            type: string
        required:
          - Name
          - SirName
          - Number

Outputs:
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"

