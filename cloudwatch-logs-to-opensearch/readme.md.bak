# Ingesting CloudWatch Logs into OpenSearch Serverless

## Overview

CloudWatch Logs provides a robust, scalable solution for collecting, monitoring, and storing log data from AWS services, applications, and systems. It offers real-time monitoring, alerts, retention policies, and search capabilities for log analysis. 

CloudWatch Logs enables highly durable storage of log data by compressing and encrypting it across multiple Availability Zones. It has flexible retention policies ranging from days to years to meet compliance requirements. Older logs can be archived to S3 or Glacier. The service also allows real-time processing to stream log data to other AWS services like Lambda and Kinesis for enabling real-time analysis and alerts. CloudWatch Logs can auto-scale to handle ingestion of terabytes of log data per day. It supports open standard log formats like JSON for easier analysis using tools like OpenSearch and QuickSight. CloudWatch Logs also has tight integration with AWS services such as EC2, Lambda, and CloudTrail for centralized logging across an AWS environment. Other capabilities include search and filter for querying log data along with viewing metrics and creating alarms.

Amazon OpenSearch Service provides a fully managed and serverless OpenSearch experience that removes the need to deploy any infrastructure. It offers automated provisioning, upgrades, and scaling to petabytes of data with millions of documents. OpenSearch Serverless has a pay-per-request pricing model with no minimum fees. It provides encryption both at rest and in transit for secure access controlled via IAM and VPC. Performance is fast with sub-second response times. OpenSearch Serverless integrates natively with services like Lambda, Kinesis, CloudWatch, and S3. It includes dashboards, alerts, SQL and machine learning capabilities powered by the OpenSearch ecosystem. High availability is built-in across Availability Zones along with point-in-time snapshots for backup.

While CloudWatch Logs excels at collecting and storing log data, OpenSearch Serverless provides more powerful search, analytics, and visualization capabilities on that log data. This project implements a serverless pipeline to get the best of both services - using CloudWatch Logs for log aggregation, and OpenSearch Serverless for log analysis.

Important: this application uses various AWS services and there are costs associated with these services after the Free Tier usage - please see the [AWS Pricing page](https://aws.amazon.com/pricing/) for details. You are responsible for any AWS costs incurred. No warranty is implied in this example.


## Key Components 

- **CloudWatch Logs** - collects and stores log data

- **Kinesis Data Firehose** - buffers and delivers streaming log data 

- **S3** - provides temporary storage for log files

- **SQS** - queues notifications when new log files are ready  

- **Lambda** - transforms log data into optimal JSON format for OpenSearch

- **OpenSearch Ingestion** - managed service to pull log files from S3 and ingest into OpenSearch

## Architecture

The architecture diagram below illustrates how these services work together:

![Architecture diagram](architecture.png)

1. CloudWatch Logs sends log data to Kinesis Data Firehose  
2. Kinesis Data Firehose buffers the data, triggers Lambda to transform the log data, and delivers it to S3
3. S3 notifications are sent to SQS when new log files are added  
4. SQS triggers OpenSearch Ingestion to ingest new data
5. OpenSearch Ingestion pulls transformed logs from S3 and loads into OpenSearch

By orchestrating these components, we can build a flexible, resilient pipeline to make CloudWatch log data available for analysis in OpenSearch Serverless. The serverless approach automates the underlying data flow, providing a managed solution that scales on demand.


## Deliverables

1. The transformation Lambda function used by Kiensis Data Firehose 
2. A sample OpenSearch Ingestion configuration for ingesting data from S3


## Implementation

The following steps explain how to implement this architecture:

### 1. Create S3 bucket

Create an S3 bucket to serve as intermediate storage for the log files. Kinesis Data Firehose will deliver logs here before they are processed and loaded into OpenSearch.

### 2. Create SQS queue

Create an SQS queue that will receive notifications when new objects are added to the S3 bucket. This queue will trigger the next step in the process.

### 3. Configure S3 event notifications 

Configure the S3 bucket to send object created events to the SQS queue. This establishes the trigger to process new log files.

### 4. Deploy Lambda function

Deploy the Lambda function that will process and transform the log files into optimal JSON format for OpenSearch. 

### 5. Create IAM roles  

Create IAM roles and policies to allow access between the services. For example, Kinesis Data Firehose will need access to write to S3.

### 6. Configure OpenSearch Ingestion  

Create an OpenSearch Ingestion pipeline that is triggered by the SQS queue and pulls log files from S3 to ingest into OpenSearch.

### 7. Create Kinesis Data Firehose stream

Create a Kinesis Data Firehose stream to receive log data from CloudWatch Logs and buffer/deliver it to the S3 bucket.

### 8. Create CloudWatch Logs subscription

Create a CloudWatch Logs subscription to send log data to the Kinesis Data Firehose stream. Apply filters as needed.

### 9. Monitor pipeline 

Monitor the OpenSearch Ingestion metrics and logs to verify the pipeline is functioning. Load test and tune as needed.

This implements the architecture in an automated, scalable serverless pipeline.

