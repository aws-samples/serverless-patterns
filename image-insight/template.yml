Transform: AWS::Serverless-2016-10-31
Resources:
  
  ## Rest API
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "RESTAPI-PUT-GET"
          version: "2023-07-13T05:41:53Z"
        servers:
        - url: "https://123343.execute-api.us-east-1.amazonaws.com/{basePath}"
          variables:
            basePath:
              default: "dev"
        paths:
          /{folder}/{item}:
            get:
              parameters:
              - name: "item"
                in: "path"
                required: true
                schema:
                  type: "string"
              - name: "folder"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OutputFetcher.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            put:
              parameters:
              - name: "item"
                in: "path"
                required: true
                schema:
                  type: "string"
              - name: "folder"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                credentials: "arn:aws:iam::759601570777:role/s3fullaccess"
                httpMethod: "PUT"
                uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{object}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.path.object: "method.request.path.item"
                  integration.request.path.bucket: "method.request.path.folder"
                passthroughBehavior: "when_no_match"
                type: "aws"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
        x-amazon-apigateway-binary-media-types:
        - "*/*"

      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  
  ## ImageProcessor Lambda function
  ImageProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ImageProcessor
      CodeUri: ./ImageProcessor.zip
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Environment: 
        Variables:
          S3_Bucket: !Sub ${AWS::StackName}-bucket-${AWS::AccountId}
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      MemorySize: 3008
      Timeout: 30
      Events:
        Bucket:
          Type: S3
          Properties:
            Bucket: !Ref Bucket
            Events:
              - s3:ObjectCreated:*
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            RestApiId: !Ref Api
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Sid: ImageVision
                Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'rekognition:*'
                  - 'bedrock:ListFoundationModels'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                Resource:
                  - !Sub 'arn:aws:dynamodb:us-east-1:759601570777:table/${AWS::StackName}DynamoDBTable'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-bucket-${AWS::AccountId}/*'    
  ImageProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ImageProcessor}
  
  ## OutputFetcher Lambda function
  OutputFetcher:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: OutputFetcher
      CodeUri: ./OutputFetcher.zip
      Handler: index.lambda_handler
      Runtime: python3.11
      Environment: 
        Variables:
          S3_Bucket: !Sub ${AWS::StackName}-bucket-${AWS::AccountId}
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      MemorySize: 3008
      Timeout: 30
      Events:
        ApiPUT:
          Type: Api
          Properties:
            Path: '*'
            Method: GET
            RestApiId: !Ref Api
  OutputFetcherLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${OutputFetcher}

  ## DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}DynamoDBTable
      AttributeDefinitions:
        - AttributeName: ImageKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: ImageKey
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ## S3 bucket
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub ${Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'