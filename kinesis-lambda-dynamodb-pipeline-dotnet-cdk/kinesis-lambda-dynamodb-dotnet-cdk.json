{
    "title": "Real-time Data Pipeline with Amazon Kinesis and AWS Lambda",
    "description": "Create a serverless real-time data pipeline using Amazon Kinesis, AWS Lambda, and Amazon DynamoDB",
    "language": ".NET",
    "level": "200",
    "framework": "AWS CDK",
    "introBox": {
        "headline": "How it works",
        "text": [
            "This pattern demonstrates how to create a serverless real-time data pipeline using Amazon Kinesis for data ingestion, AWS Lambda for processing, Amazon DynamoDB for data storage, and includes comprehensive error handling mechanisms.",
            "The data pipeline works as follows:",
            "1. Data is ingested through an Amazon Kinesis Data Stream, which acts as the entry point for real-time data.",
            "2. An AWS Lambda function is automatically triggered when new records appear in the Kinesis stream.",
            "3. The Lambda function processes the incoming data and stores it in an Amazon DynamoDB table.",
            "4. For robust error handling, the system includes several mechanisms:",
            "   - Processing errors are logged to Amazon CloudWatch",
            "   - Errors can be stored in a separate DynamoDB table for tracking",
            "   - Failed records are automatically retried up to a configured maximum count",
            "   - Persistently failing records can be sent to an Amazon SQS Dead Letter Queue (DLQ) for further investigation",
            "The entire infrastructure is defined and deployed using AWS CDK with .NET, including all necessary AWS resources, IAM roles, and permissions, ensuring a fully automated and reproducible deployment process."
        ]
    },
    "gitHub": {
        "template": {
            "repoURL": "https://github.com/aws-samples/serverless-patterns/tree/main/kinesis-lambda-dynamodb-pipeline-dotnet-cdk",
            "templateURL": "serverless-patterns/kinesis-lambda-dynamodb-pipeline-dotnet-cdk",
            "projectFolder": "kinesis-lambda-dynamodb-pipeline-dotnet-cdk",
            "templateFile": "/src/KinesisLambdaDynamoDbCdk/KinesisLambdaDynamoDbCdkStack.cs"
        }
    },
    "resources": {
        "bullets": [
            {
                "text": "Amazon Kinesis Data Streams",
                "link": "https://docs.aws.amazon.com/streams/latest/dev/introduction.html"
            },
            {
                "text": "AWS Lambda",
                "link": "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"
            },
            {
                "text": "Amazon DynamoDB",
                "link": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html"
            },
            {
                "text": "AWS CDK",
                "link": "https://docs.aws.amazon.com/cdk/latest/guide/home.html"
            }
        ]
    },
    "deploy": {
        "text": [
            "cdk deploy"
        ]
    },
    "testing": {
        "text": [
            "See the GitHub repo for detailed testing instructions, including how to put records into the Kinesis stream and verify processing in DynamoDB tables."
        ]
    },
    "cleanup": {
        "text": [
            "Delete the stack: <code>cdk destroy</code>."
        ]
    },
    "authors": [
        {
            "name": "Tejas Vora",
            "image": "./TejasVora.jpg",
            "bio": "Tejas Vora is a Senior Solutions Architect with Amazon Web Services.",
            "linkedin": "tejas-vora-b4758a47"
        }
    ],
    "patternArch": {
        "icon1": {
            "x": 20,
            "y": 50,
            "service": "kinesis-datastreams",
            "label": "Amazon Kinesis"
        },
        "icon2": {
            "x": 50,
            "y": 50,
            "service": "lambda",
            "label": "AWS Lambda"
        },
        "icon3": {
            "x": 80,
            "y": 50,
            "service": "dynamodb",
            "label": "Amazon DynamoDB"
        },
        "line1": {
            "from": "icon1",
            "to": "icon2",
            "label": ""
        },

        "line2": {
            "from": "icon2",
            "to": "icon3",
            "label": ""
        }
    }
}
