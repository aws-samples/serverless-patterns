/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.services.lambda.samples.events.msk;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Contact extends org.apache.avro.specific.SpecificRecordBase {
  private static final long serialVersionUID = -4035028153225992319L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contact\",\"namespace\":\"com.amazonaws.services.lambda.samples.events.msk\",\"fields\":[{\"name\":\"firstname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"company\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"street\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"county\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"zip\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"homePhone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cellPhone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"website\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Contact> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Contact> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Contact> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Contact> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Contact> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Contact to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Contact from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Contact instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Contact fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String firstname;
  private java.lang.String lastname;
  private java.lang.String company;
  private java.lang.String street;
  private java.lang.String city;
  private java.lang.String county;
  private java.lang.String state;
  private java.lang.String zip;
  private java.lang.String homePhone;
  private java.lang.String cellPhone;
  private java.lang.String email;
  private java.lang.String website;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contact() {}

  /**
   * All-args constructor.
   * @param firstname The new value for firstname
   * @param lastname The new value for lastname
   * @param company The new value for company
   * @param street The new value for street
   * @param city The new value for city
   * @param county The new value for county
   * @param state The new value for state
   * @param zip The new value for zip
   * @param homePhone The new value for homePhone
   * @param cellPhone The new value for cellPhone
   * @param email The new value for email
   * @param website The new value for website
   */
  public Contact(java.lang.String firstname, java.lang.String lastname, java.lang.String company, java.lang.String street, java.lang.String city, java.lang.String county, java.lang.String state, java.lang.String zip, java.lang.String homePhone, java.lang.String cellPhone, java.lang.String email, java.lang.String website) {
    this.firstname = firstname;
    this.lastname = lastname;
    this.company = company;
    this.street = street;
    this.city = city;
    this.county = county;
    this.state = state;
    this.zip = zip;
    this.homePhone = homePhone;
    this.cellPhone = cellPhone;
    this.email = email;
    this.website = website;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstname;
    case 1: return lastname;
    case 2: return company;
    case 3: return street;
    case 4: return city;
    case 5: return county;
    case 6: return state;
    case 7: return zip;
    case 8: return homePhone;
    case 9: return cellPhone;
    case 10: return email;
    case 11: return website;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstname = value$ != null ? value$.toString() : null; break;
    case 1: lastname = value$ != null ? value$.toString() : null; break;
    case 2: company = value$ != null ? value$.toString() : null; break;
    case 3: street = value$ != null ? value$.toString() : null; break;
    case 4: city = value$ != null ? value$.toString() : null; break;
    case 5: county = value$ != null ? value$.toString() : null; break;
    case 6: state = value$ != null ? value$.toString() : null; break;
    case 7: zip = value$ != null ? value$.toString() : null; break;
    case 8: homePhone = value$ != null ? value$.toString() : null; break;
    case 9: cellPhone = value$ != null ? value$.toString() : null; break;
    case 10: email = value$ != null ? value$.toString() : null; break;
    case 11: website = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'firstname' field.
   * @return The value of the 'firstname' field.
   */
  public java.lang.String getFirstname() {
    return firstname;
  }


  /**
   * Sets the value of the 'firstname' field.
   * @param value the value to set.
   */
  public void setFirstname(java.lang.String value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   * @return The value of the 'lastname' field.
   */
  public java.lang.String getLastname() {
    return lastname;
  }


  /**
   * Sets the value of the 'lastname' field.
   * @param value the value to set.
   */
  public void setLastname(java.lang.String value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'company' field.
   * @return The value of the 'company' field.
   */
  public java.lang.String getCompany() {
    return company;
  }


  /**
   * Sets the value of the 'company' field.
   * @param value the value to set.
   */
  public void setCompany(java.lang.String value) {
    this.company = value;
  }

  /**
   * Gets the value of the 'street' field.
   * @return The value of the 'street' field.
   */
  public java.lang.String getStreet() {
    return street;
  }


  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.String value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'county' field.
   * @return The value of the 'county' field.
   */
  public java.lang.String getCounty() {
    return county;
  }


  /**
   * Sets the value of the 'county' field.
   * @param value the value to set.
   */
  public void setCounty(java.lang.String value) {
    this.county = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'zip' field.
   * @return The value of the 'zip' field.
   */
  public java.lang.String getZip() {
    return zip;
  }


  /**
   * Sets the value of the 'zip' field.
   * @param value the value to set.
   */
  public void setZip(java.lang.String value) {
    this.zip = value;
  }

  /**
   * Gets the value of the 'homePhone' field.
   * @return The value of the 'homePhone' field.
   */
  public java.lang.String getHomePhone() {
    return homePhone;
  }


  /**
   * Sets the value of the 'homePhone' field.
   * @param value the value to set.
   */
  public void setHomePhone(java.lang.String value) {
    this.homePhone = value;
  }

  /**
   * Gets the value of the 'cellPhone' field.
   * @return The value of the 'cellPhone' field.
   */
  public java.lang.String getCellPhone() {
    return cellPhone;
  }


  /**
   * Sets the value of the 'cellPhone' field.
   * @param value the value to set.
   */
  public void setCellPhone(java.lang.String value) {
    this.cellPhone = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'website' field.
   * @return The value of the 'website' field.
   */
  public java.lang.String getWebsite() {
    return website;
  }


  /**
   * Sets the value of the 'website' field.
   * @param value the value to set.
   */
  public void setWebsite(java.lang.String value) {
    this.website = value;
  }

  /**
   * Creates a new Contact RecordBuilder.
   * @return A new Contact RecordBuilder
   */
  public static com.amazonaws.services.lambda.samples.events.msk.Contact.Builder newBuilder() {
    return new com.amazonaws.services.lambda.samples.events.msk.Contact.Builder();
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.amazonaws.services.lambda.samples.events.msk.Contact.Builder newBuilder(com.amazonaws.services.lambda.samples.events.msk.Contact.Builder other) {
    if (other == null) {
      return new com.amazonaws.services.lambda.samples.events.msk.Contact.Builder();
    } else {
      return new com.amazonaws.services.lambda.samples.events.msk.Contact.Builder(other);
    }
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Contact instance.
   * @param other The existing instance to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.amazonaws.services.lambda.samples.events.msk.Contact.Builder newBuilder(com.amazonaws.services.lambda.samples.events.msk.Contact other) {
    if (other == null) {
      return new com.amazonaws.services.lambda.samples.events.msk.Contact.Builder();
    } else {
      return new com.amazonaws.services.lambda.samples.events.msk.Contact.Builder(other);
    }
  }

  /**
   * RecordBuilder for Contact instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contact>
    implements org.apache.avro.data.RecordBuilder<Contact> {

    private java.lang.String firstname;
    private java.lang.String lastname;
    private java.lang.String company;
    private java.lang.String street;
    private java.lang.String city;
    private java.lang.String county;
    private java.lang.String state;
    private java.lang.String zip;
    private java.lang.String homePhone;
    private java.lang.String cellPhone;
    private java.lang.String email;
    private java.lang.String website;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.services.lambda.samples.events.msk.Contact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.company)) {
        this.company = data().deepCopy(fields()[2].schema(), other.company);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.street)) {
        this.street = data().deepCopy(fields()[3].schema(), other.street);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.county)) {
        this.county = data().deepCopy(fields()[5].schema(), other.county);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.zip)) {
        this.zip = data().deepCopy(fields()[7].schema(), other.zip);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.homePhone)) {
        this.homePhone = data().deepCopy(fields()[8].schema(), other.homePhone);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.cellPhone)) {
        this.cellPhone = data().deepCopy(fields()[9].schema(), other.cellPhone);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.email)) {
        this.email = data().deepCopy(fields()[10].schema(), other.email);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.website)) {
        this.website = data().deepCopy(fields()[11].schema(), other.website);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Contact instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.services.lambda.samples.events.msk.Contact other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.company)) {
        this.company = data().deepCopy(fields()[2].schema(), other.company);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.street)) {
        this.street = data().deepCopy(fields()[3].schema(), other.street);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.county)) {
        this.county = data().deepCopy(fields()[5].schema(), other.county);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.zip)) {
        this.zip = data().deepCopy(fields()[7].schema(), other.zip);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.homePhone)) {
        this.homePhone = data().deepCopy(fields()[8].schema(), other.homePhone);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cellPhone)) {
        this.cellPhone = data().deepCopy(fields()[9].schema(), other.cellPhone);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.email)) {
        this.email = data().deepCopy(fields()[10].schema(), other.email);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.website)) {
        this.website = data().deepCopy(fields()[11].schema(), other.website);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'firstname' field.
      * @return The value.
      */
    public java.lang.String getFirstname() {
      return firstname;
    }


    /**
      * Sets the value of the 'firstname' field.
      * @param value The value of 'firstname'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setFirstname(java.lang.String value) {
      validate(fields()[0], value);
      this.firstname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstname' field has been set.
      * @return True if the 'firstname' field has been set, false otherwise.
      */
    public boolean hasFirstname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstname' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastname' field.
      * @return The value.
      */
    public java.lang.String getLastname() {
      return lastname;
    }


    /**
      * Sets the value of the 'lastname' field.
      * @param value The value of 'lastname'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setLastname(java.lang.String value) {
      validate(fields()[1], value);
      this.lastname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastname' field has been set.
      * @return True if the 'lastname' field has been set, false otherwise.
      */
    public boolean hasLastname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastname' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'company' field.
      * @return The value.
      */
    public java.lang.String getCompany() {
      return company;
    }


    /**
      * Sets the value of the 'company' field.
      * @param value The value of 'company'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setCompany(java.lang.String value) {
      validate(fields()[2], value);
      this.company = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'company' field has been set.
      * @return True if the 'company' field has been set, false otherwise.
      */
    public boolean hasCompany() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'company' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearCompany() {
      company = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * @return The value.
      */
    public java.lang.String getStreet() {
      return street;
    }


    /**
      * Sets the value of the 'street' field.
      * @param value The value of 'street'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setStreet(java.lang.String value) {
      validate(fields()[3], value);
      this.street = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'street' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearStreet() {
      street = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setCity(java.lang.String value) {
      validate(fields()[4], value);
      this.city = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearCity() {
      city = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'county' field.
      * @return The value.
      */
    public java.lang.String getCounty() {
      return county;
    }


    /**
      * Sets the value of the 'county' field.
      * @param value The value of 'county'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setCounty(java.lang.String value) {
      validate(fields()[5], value);
      this.county = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'county' field has been set.
      * @return True if the 'county' field has been set, false otherwise.
      */
    public boolean hasCounty() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'county' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearCounty() {
      county = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setState(java.lang.String value) {
      validate(fields()[6], value);
      this.state = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearState() {
      state = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'zip' field.
      * @return The value.
      */
    public java.lang.String getZip() {
      return zip;
    }


    /**
      * Sets the value of the 'zip' field.
      * @param value The value of 'zip'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setZip(java.lang.String value) {
      validate(fields()[7], value);
      this.zip = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'zip' field has been set.
      * @return True if the 'zip' field has been set, false otherwise.
      */
    public boolean hasZip() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'zip' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearZip() {
      zip = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'homePhone' field.
      * @return The value.
      */
    public java.lang.String getHomePhone() {
      return homePhone;
    }


    /**
      * Sets the value of the 'homePhone' field.
      * @param value The value of 'homePhone'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setHomePhone(java.lang.String value) {
      validate(fields()[8], value);
      this.homePhone = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'homePhone' field has been set.
      * @return True if the 'homePhone' field has been set, false otherwise.
      */
    public boolean hasHomePhone() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'homePhone' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearHomePhone() {
      homePhone = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'cellPhone' field.
      * @return The value.
      */
    public java.lang.String getCellPhone() {
      return cellPhone;
    }


    /**
      * Sets the value of the 'cellPhone' field.
      * @param value The value of 'cellPhone'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setCellPhone(java.lang.String value) {
      validate(fields()[9], value);
      this.cellPhone = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'cellPhone' field has been set.
      * @return True if the 'cellPhone' field has been set, false otherwise.
      */
    public boolean hasCellPhone() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'cellPhone' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearCellPhone() {
      cellPhone = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setEmail(java.lang.String value) {
      validate(fields()[10], value);
      this.email = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearEmail() {
      email = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'website' field.
      * @return The value.
      */
    public java.lang.String getWebsite() {
      return website;
    }


    /**
      * Sets the value of the 'website' field.
      * @param value The value of 'website'.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder setWebsite(java.lang.String value) {
      validate(fields()[11], value);
      this.website = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'website' field has been set.
      * @return True if the 'website' field has been set, false otherwise.
      */
    public boolean hasWebsite() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'website' field.
      * @return This builder.
      */
    public com.amazonaws.services.lambda.samples.events.msk.Contact.Builder clearWebsite() {
      website = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Contact build() {
      try {
        Contact record = new Contact();
        record.firstname = fieldSetFlags()[0] ? this.firstname : (java.lang.String) defaultValue(fields()[0]);
        record.lastname = fieldSetFlags()[1] ? this.lastname : (java.lang.String) defaultValue(fields()[1]);
        record.company = fieldSetFlags()[2] ? this.company : (java.lang.String) defaultValue(fields()[2]);
        record.street = fieldSetFlags()[3] ? this.street : (java.lang.String) defaultValue(fields()[3]);
        record.city = fieldSetFlags()[4] ? this.city : (java.lang.String) defaultValue(fields()[4]);
        record.county = fieldSetFlags()[5] ? this.county : (java.lang.String) defaultValue(fields()[5]);
        record.state = fieldSetFlags()[6] ? this.state : (java.lang.String) defaultValue(fields()[6]);
        record.zip = fieldSetFlags()[7] ? this.zip : (java.lang.String) defaultValue(fields()[7]);
        record.homePhone = fieldSetFlags()[8] ? this.homePhone : (java.lang.String) defaultValue(fields()[8]);
        record.cellPhone = fieldSetFlags()[9] ? this.cellPhone : (java.lang.String) defaultValue(fields()[9]);
        record.email = fieldSetFlags()[10] ? this.email : (java.lang.String) defaultValue(fields()[10]);
        record.website = fieldSetFlags()[11] ? this.website : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Contact>
    WRITER$ = (org.apache.avro.io.DatumWriter<Contact>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Contact>
    READER$ = (org.apache.avro.io.DatumReader<Contact>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.firstname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.firstname);
    }

    if (this.lastname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lastname);
    }

    if (this.company == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.company);
    }

    if (this.street == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.street);
    }

    if (this.city == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.city);
    }

    if (this.county == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.county);
    }

    if (this.state == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.state);
    }

    if (this.zip == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.zip);
    }

    if (this.homePhone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.homePhone);
    }

    if (this.cellPhone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.cellPhone);
    }

    if (this.email == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.email);
    }

    if (this.website == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.website);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.firstname = null;
      } else {
        this.firstname = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastname = null;
      } else {
        this.lastname = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.company = null;
      } else {
        this.company = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.street = null;
      } else {
        this.street = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.city = null;
      } else {
        this.city = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.county = null;
      } else {
        this.county = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.state = null;
      } else {
        this.state = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.zip = null;
      } else {
        this.zip = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.homePhone = null;
      } else {
        this.homePhone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.cellPhone = null;
      } else {
        this.cellPhone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.email = null;
      } else {
        this.email = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.website = null;
      } else {
        this.website = in.readString();
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firstname = null;
          } else {
            this.firstname = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastname = null;
          } else {
            this.lastname = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.company = null;
          } else {
            this.company = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.street = null;
          } else {
            this.street = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.city = null;
          } else {
            this.city = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.county = null;
          } else {
            this.county = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.state = null;
          } else {
            this.state = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.zip = null;
          } else {
            this.zip = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.homePhone = null;
          } else {
            this.homePhone = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.cellPhone = null;
          } else {
            this.cellPhone = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.email = null;
          } else {
            this.email = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.website = null;
          } else {
            this.website = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










