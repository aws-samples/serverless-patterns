AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for central Account containing Private API Gateway, VPC link, Network Load Balancer and execute-api VPC Endpoint.

Parameters:
  InstanceType:
    Description: Enter t2.micro or t2.small. Default is t2.micro.
    Type: String
    AllowedValues:
      - t2.micro
      - t2.small
    Default: t2.micro
    ConstraintDescription: Must be either t2.micro or t2.small.
  AmiID:
    Description: Please provide a valid AMI id to launch EC2 Instance.
    Type: AWS::EC2::Image::Id
  AllowedIP:
    Description: CIDR block to allow SSH access (e.g., 203.0.113.0/24).
    Type: String
    Default: 0.0.0.0/0
  VPCId:
    Description: Please provide a VPC to deploy the solution into.
    Type: AWS::EC2::VPC::Id
  PublicSubnet:
    Description: Please provide the public subnet id to launch EC2 Instance
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Description: Please provide the first private subnet id with outbound connectivity within the VPC you selected above.
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: Please provide the second private subnet id with outbound connectivity within the VPC you selected above.
    Type: AWS::EC2::Subnet::Id
  ApiGwURLAccountA:
    Type: String
    Description: The API GW URL from Account A including path
  ApiGwURLAccountB:
    Type: String
    Description: The API GW URL from Account B including path

Resources:
  ########### EC2 Client Instance ###########
  ClientInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiID
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref NewKeyPair
      SecurityGroupIds: 
        - !GetAtt ClientEC2SecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref InstanceType, "Client"]]
        - Key: InstanceType
          Value: !Ref InstanceType
  
  ########### EC2 Key Pair ###########
  NewKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${AWS::StackName}-${AWS::Region}-MyKeyPair

  ########### Security Group for Client EC2 ###########
  ClientEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH inbound traffic
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIP
  
  ########### API Gateway REST API ###############
  MyApi:
    DependsOn: ApiGatewayVpcLink
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: PRIVATE
      StageName: Prod
      AlwaysDeploy: true
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: !Sub "PrivateApi-${AWS::StackName}"
          version: "1.0"
        x-amazon-apigateway-binary-media-types:
          - "*/*"
        servers:
        - x-amazon-apigateway-endpoint-configuration:
            vpcEndpointIds:
            - !Ref ExecuteApiVpcEndpoint
        paths:
          /fargate:
            get:
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                connectionId: !Ref ApiGatewayVpcLink
                httpMethod: "GET"
                uri: !Ref ApiGwURLAccountA
                connectionType: "VPC_LINK"
                passthroughBehavior: "when_no_templates"
                type: "http"
                responses:
                  default:
                    statusCode: "200"
          /lambda:
            get:
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                connectionId: !Ref ApiGatewayVpcLink
                httpMethod: "GET"
                uri: !Ref ApiGwURLAccountB
                connectionType: "VPC_LINK"
                passthroughBehavior: "when_no_templates"
                type: "http"
                responses:
                  default:
                    statusCode: "200"
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "execute-api:/*"
            Condition:
              StringEquals:
                aws:sourceVpce: 
                - !Ref ExecuteApiVpcEndpoint

  ########### API Gateway VPC Link ###############
  ApiGatewayVpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: VPCLinkRestNlbInternal
      TargetArns: 
        - !Ref MyNLB

  ########### Network Load Balancer (NLB) ###############
  MyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub PrivateNLB-${AWS::StackName}
      Scheme: internal
      Type: network
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref NLBVpcEndpointSG
      EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: "off"

  ########### NLB Target Group ###############
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Protocol: TCP
      Port: 443
      TargetType: ip
      Targets:
        - Id: !GetAtt GetPrivateIPs.IP0
        - Id: !GetAtt GetPrivateIPs.IP1
      HealthCheckProtocol: TCP

  ########### NLB Listener ###############
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyNLB
      Port: 443
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup

  ########### Execute API VPC Endpoint ###############
  ExecuteApiVpcEndpoint:
    DependsOn: NLBVpcEndpointSG
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      VpcId: !Ref VPCId
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref NLBVpcEndpointSG

  ########### Security Group for NLB and VPC Endpoint ###############
  NLBVpcEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for NLB and VPC endpoint
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt ClientEC2SecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ########### Security Group Ingress Rule ###############
  NLBVpcEndpointSGingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: NLBVpcEndpointSG
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: NLBVpcEndpointSG

  ########### Lambda Function to Fetch VPC Endpoint IPs ###############
  FetchVPCEndpointIPsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Architectures: 
        - arm64
      CodeUri: src/
      Handler: lambda_function.lambda_handler
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeNetworkInterfaces
              Resource: "*"

  ########### Custom Resource to Fetch Private IPs ###############
  GetPrivateIPs:
    DependsOn:
      - ExecuteApiVpcEndpoint
    Type: Custom::NLBTargets
    Properties:
      ServiceToken: !GetAtt FetchVPCEndpointIPsFunction.Arn
      NetworkInterfaceIds: !GetAtt ExecuteApiVpcEndpoint.NetworkInterfaceIds

Outputs:
  ApiUrlForECS:
    Description: API Gateway Invoke URL with GET method for ECS Fargate integration
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${MyApi.Stage}/fargate
  ApiUrlForLambda:
    Description: API Gateway Invoke URL with GET method for Lambda function integration
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${MyApi.Stage}/lambda
  EC2KeyPairName:
    Value: !Ref NewKeyPair
    Description: Name of Newly created EC2 Key Pair, that you can use to SSH into the EC2 Instance
  EC2PublicIP:
    Value: !GetAtt ClientInstance.PublicIp
    Description: Public IP address of the EC2 instance.