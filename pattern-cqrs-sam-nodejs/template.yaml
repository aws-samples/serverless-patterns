AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cqrs-pattern-apigw

  Sample SAM Template for cqrs-pattern-apigw
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Mappings:
  GeneralConfig:
    VPC:
      VPCName: "CQRS Pattern API Gateway VPC"
    SecretsManager:
      AppName: "CQRS Pattern API Gateway Demo"
      SecretName: "APIGWAuroraUserSecret"
    Database:
      DBClusterName: "cqrsapigwrdscluster"
      DatabaseName: "cqrsapigwdb"
      MasterUserName: "admin_user"
    RDSProxy:
      RDSProxyName: "rds-proxy"
    EventBus:
      EventBusName: "CQRSPatternPIGatewayEventBus"      
    LogGroup:
      LogGroupName: "CQRSPatternAPIGatewayLogGroup"
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]    
Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !FindInMap [ "GeneralConfig", "SecretsManager", "SecretName" ]
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub 
          - '{"username": "${DBMasterUserName}"}'
          - DBMasterUserName: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: AppName
          Value: !FindInMap [ "GeneralConfig", "SecretsManager", "AppName" ]
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: Allow
            Principal:
              Service: [ rds.amazonaws.com ]
      Policies:
        - PolicyName: RDSProxyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Ref DBSecret
  RDSCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      DBClusterIdentifier: !FindInMap [ "GeneralConfig", "Database", "DBClusterName" ]
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ]]
      DatabaseName: !FindInMap [ "GeneralConfig", "Database", "DatabaseName" ]
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.02.1
      ServerlessV2ScalingConfiguration:
        MaxCapacity: 4
        MinCapacity: 0.5
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.serverless
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.02.1
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
      DBClusterIdentifier: 
        Ref: RDSCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
  RDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      Auth:
        - { AuthScheme: SECRETS, SecretArn: !Ref DBSecret, IAMAuth: REQUIRED }
      DBProxyName: !FindInMap [ "GeneralConfig", "RDSProxy", "RDSProxyName" ]
      RoleArn: !GetAtt RDSProxyRole.Arn
      EngineFamily: 'MYSQL'
      IdleClientTimeout: 120
      RequireTLS: true
      DebugLogging: false
      VpcSubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      VpcSecurityGroupIds:
        - !GetAtt RDSProxySecurityGroup.GroupId
  RDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    DependsOn:
      - RDSCluster
      - RDSInstance
    Properties:
      DBProxyName: !Ref RDSProxy
      DBClusterIdentifiers: [ !Ref RDSCluster ]
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        MaxConnectionsPercent: 5
        MaxIdleConnectionsPercent: 4
        ConnectionBorrowTimeout: 120        
  LambdaDBAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda DB Access
      VpcId: 
        Ref: "VPC"
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Aurora Serverless v2 Access
      VpcId: 
        Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref RDSProxySecurityGroup
  RDSProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Proxy Security Group
      VpcId: 
        Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaDBAccessSecurityGroup
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-public-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-public-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-private-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-private-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-IGW'


  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-public-route-table'


  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-public-nacl'



  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway0:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP0"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnet0"

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP1"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnet1"

  PrivateRouteTable0:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-private-route-table-0'

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !FindInMap [ "GeneralConfig", "VPC", "VPCName" ]
              - '-private-route-table-1'

  PrivateRouteToInternet0:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable0"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway0"

  PrivateRouteToInternet1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable1"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway1"

  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet0"
      RouteTableId:
        Ref: "PrivateRouteTable0"

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      RouteTableId:
        Ref: "PrivateRouteTable1"
  ProcessOrderTableRecords:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function/process-order-table-records/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaDBAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet0
          - !Ref PrivateSubnet1
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USER: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
          PROXY_ENDPOINT: !GetAtt 'RDSProxy.Endpoint'
          DB_NAME: !FindInMap [ "GeneralConfig", "Database", "DatabaseName" ]
      Policies:
        - Statement:
            - Sid: AllowDbConnect
              Effect: Allow
              Action:
                - rds-db:connect
              Resource:
                - !Sub 
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${RDSProxyResourceId}/${MasterUserName}"
                  - RDSProxyResourceId: !Select
                    - 6 # note(cosborn) 0-indexed, arn:PARTITION:rds:REGION:ACCOUNT:db-proxy:IDENTIFIER
                    - !Split [ ':', !GetAtt RDSProxy.DBProxyArn ]
                    MasterUserName: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]    
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt OrdersTable.StreamArn
            BatchSize: 1
            MaximumRetryAttempts: 2
            MaximumRecordAgeInSeconds: 60
            StartingPosition: TRIM_HORIZON
    DependsOn: RDSInstance            
  InitializeDatabase:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function/initialize-database/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaDBAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet0
          - !Ref PrivateSubnet1
      Architectures:
        - x86_64
      Events:
        EBTrigger:
          Type: EventBridgeRule
          Properties:
              EventBusName: !FindInMap [ "GeneralConfig", "EventBus", "EventBusName" ]
              Pattern:
                source:
                  - orderPipeline
                detail-type:
                  - initializeDatabase
      Environment:
        Variables:
          DB_USER: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
          PROXY_ENDPOINT: !GetAtt 'RDSProxy.Endpoint'
          DB_NAME: !FindInMap [ "GeneralConfig", "Database", "DatabaseName" ]
      Policies:
        - Statement:
            - Sid: AllowDbConnect
              Effect: Allow
              Action:
                - rds-db:connect
              Resource:
                - !Sub 
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${RDSProxyResourceId}/${MasterUserName}"
                  - RDSProxyResourceId: !Select
                    - 6 # note(cosborn) 0-indexed, arn:PARTITION:rds:REGION:ACCOUNT:db-proxy:IDENTIFIER
                    - !Split [ ':', !GetAtt RDSProxy.DBProxyArn ]
                    MasterUserName: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
    DependsOn: 
      - RDSInstance
      - CQRSEventBus
  InitializeDatabaseCustomAction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function/initialize-database-custom-action/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 10
      Architectures:
        - x86_64
      Environment:
        Variables:
          EVENTBUS_NAME: !Ref CQRSEventBus
      Policies:
        - EventBridgePutEventsPolicy: 
            EventBusName: !FindInMap [ "GeneralConfig", "EventBus", "EventBusName" ]
    DependsOn: 
      - InitializeDatabase
      - CQRSEventBus
      - RDSProxyTargetGroup
  InitializeDatabaseCustomResource:
    Type: "Custom::CustomResource"
    Properties:
      ServiceToken: !GetAtt InitializeDatabaseCustomAction.Arn
    DependsOn: InitializeDatabaseCustomAction
  CQRSEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !FindInMap [ "GeneralConfig", "EventBus", "EventBusName" ]

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: orderid
          AttributeType: S
      KeySchema: 
        - AttributeName: orderid
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  CommandApiGW:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      # CanarySetting:
      #   PercentTraffic: 5
      AccessLogSetting:
        DestinationArn: !GetAtt CommandApiGWLogGroup.Arn
        Format: >
          {"requestId":"$context.requestId",
          "waf-error":"$context.waf.error",
          "waf-status":"$context.waf.status",
          "waf-latency":"$context.waf.latency",
          "waf-response":"$context.wafResponseCode",
          "authenticate-error":"$context.authenticate.error",
          "authenticate-status":"$context.authenticate.status",
          "authenticate-latency":"$context.authenticate.latency",
          "authorize-error":"$context.authorize.error",
          "authorize-status":"$context.authorize.status",
          "authorize-latency":"$context.authorize.latency",
          "integration-error":"$context.integration.error",
          "integration-status":"$context.integration.status",
          "integration-latency":"$context.integration.latency",
          "integration-requestId":"$context.integration.requestId",
          "integration-integrationStatus":"$context.integration.integrationStatus",
          "response-latency":"$context.responseLatency",
          "status":"$context.status"}
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: './api.yaml'
  CommandApiGWLogGroup:
    Type: AWS::Logs::LogGroup
  CommandApiGWRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DDBCrudPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
              - dynamodb:PutItem
              Effect: Allow
              Resource: !GetAtt OrdersTable.Arn
  QueryApiGW:
    Type: AWS::Serverless::Api
    Properties:
      Name: "CQRS Pattern Query API Gateway Example"
      StageName: Prod
      TracingEnabled: true
      # CanarySetting:
      #   PercentTraffic: 5
      AccessLogSetting:
        DestinationArn: !GetAtt QueryApiGWLogGroup.Arn
        Format: >
          {"requestId":"$context.requestId",
          "waf-error":"$context.waf.error",
          "waf-status":"$context.waf.status",
          "waf-latency":"$context.waf.latency",
          "waf-response":"$context.wafResponseCode",
          "authenticate-error":"$context.authenticate.error",
          "authenticate-status":"$context.authenticate.status",
          "authenticate-latency":"$context.authenticate.latency",
          "authorize-error":"$context.authorize.error",
          "authorize-status":"$context.authorize.status",
          "authorize-latency":"$context.authorize.latency",
          "integration-error":"$context.integration.error",
          "integration-status":"$context.integration.status",
          "integration-latency":"$context.integration.latency",
          "integration-requestId":"$context.integration.requestId",
          "integration-integrationStatus":"$context.integration.integrationStatus",
          "response-latency":"$context.responseLatency",
          "status":"$context.status"}
  QueryApiGWLogGroup:
    Type: AWS::Logs::LogGroup              
  QueryItemSalesReport:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function/query-item-sales-report/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaDBAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet0
          - !Ref PrivateSubnet1
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USER: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
          PROXY_ENDPOINT: !GetAtt 'RDSProxy.Endpoint'
          DB_NAME: !FindInMap [ "GeneralConfig", "Database", "DatabaseName" ]
      Policies:
        - Statement:
            - Sid: AllowDbConnect
              Effect: Allow
              Action:
                - rds-db:connect
              Resource:
                - !Sub 
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${RDSProxyResourceId}/${MasterUserName}"
                  - RDSProxyResourceId: !Select
                    - 6 # note(cosborn) 0-indexed, arn:PARTITION:rds:REGION:ACCOUNT:db-proxy:IDENTIFIER
                    - !Split [ ':', !GetAtt RDSProxy.DBProxyArn ]
                    MasterUserName: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]    
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /itemSalesReport
            Method: get
            RestApiId: !Ref QueryApiGW
  QueryMonthlySalesByItem:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: function/query-monthly-sales-by-item/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaDBAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet0
          - !Ref PrivateSubnet1
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USER: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
          PROXY_ENDPOINT: !GetAtt 'RDSProxy.Endpoint'
          DB_NAME: !FindInMap [ "GeneralConfig", "Database", "DatabaseName" ]
      Policies:
        - Statement:
            - Sid: AllowDbConnect
              Effect: Allow
              Action:
                - rds-db:connect
              Resource:
                - !Sub 
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${RDSProxyResourceId}/${MasterUserName}"
                  - RDSProxyResourceId: !Select
                    - 6 # note(cosborn) 0-indexed, arn:PARTITION:rds:REGION:ACCOUNT:db-proxy:IDENTIFIER
                    - !Split [ ':', !GetAtt RDSProxy.DBProxyArn ]
                    MasterUserName: !FindInMap [ "GeneralConfig", "Database", "MasterUserName" ]
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /monthlySalesByItem/{itemId}
            Method: get
            RestApiId: !Ref QueryApiGW
            RequestParameters:
              - method.request.path.itemId
  ApiGWAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGWLoggingRole.Arn"
  ApiGWLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"              
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OrdersTableName:
    Description: "DynamoDB Table Name for Orders"
    Value: !Ref OrdersTable
  CommandAPIRootURL:
    Description: "Root URL for Command API"
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/Prod'
      - ApiId: !Ref CommandApiGW      
  QueryAPIRootURL:
    Description: "Root URL for Query API"
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/Prod'
      - ApiId: !Ref QueryApiGW