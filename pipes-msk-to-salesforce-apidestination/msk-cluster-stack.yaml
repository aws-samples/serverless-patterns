AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  MSKKafkaVersion:
    Type: String
    Default: 2.8.1
    AllowedValues:
    - 2.8.1
    - 2.8.0
    - 2.7.1
    - 2.7.0
    - 2.6.2
    - 2.6.1
    - 2.6.0
    - 2.5.1
    - 2.4.1.1
    - 2.3.1
    - 2.2.1
  InstanceType:
    Type: String
    Default: kafka.t3.small
    AllowedValues:
    - kafka.t3.small
    - kafka.m5.large
    - kafka.m5.xlarge
    - kafka.m5.2xlarge
    - kafka.m5.4xlarge
    - kafka.m5.8xlarge
    - kafka.m5.12xlarge
    - kafka.m5.16xlarge
    - kafka.m5.24xlarge
  MskClusterVPCId:
    Type: String
    Description: 'The VPC ID for MSK Cluster'
  MskClusterPublicSubnet:
    Type: String
    Description: 'MSK Cluster Public Subnet'
  MskClusterPrivateSubnet1:
    Type: String
    Description: 'MSK Cluster Private Subnet-1'
  MskClusterPrivateSubnet2:
    Type: String
    Description: 'MSK Cluster Private Subnet-2'

Resources:
  MSKProducerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 from BastionHostSecurityGroup
      GroupName: !Sub "${AWS::StackName} Security group attached to the Kafka client producer"
      VpcId: !Ref MskClusterVPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/24

  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName} Security group for the MSK cluster"
      GroupDescription: Security Group for the MSK cluster
      VpcId: !Ref MskClusterVPCId
      SecurityGroupIngress:
      - Description: ZooKeeper Plaintext
        FromPort: 2181
        ToPort: 2181
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt MSKProducerSG.GroupId
      - Description: Bootstrap servers Plaintext
        FromPort: 9092
        ToPort: 9092
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt MSKProducerSG.GroupId
      - Description: IAM Auth access control
        FromPort: 9098
        ToPort: 9098
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt MSKProducerSG.GroupId
      - Description: Bootstrap servers TLS
        FromPort: 9094
        ToPort: 9094
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt MSKProducerSG.GroupId
      - Description: Kafka Connect
        FromPort: 8083
        ToPort: 8083
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt MSKProducerSG.GroupId
      - Description: Enable access to Schema Registry inside the SG
        FromPort: 8081
        ToPort: 8081
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt MSKProducerSG.GroupId

  MSKSecurityGroup9094:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MSKSecurityGroup
    Properties:
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      Description: Enable Self referencing Bootstrap servers TLS
      IpProtocol: tcp
      FromPort: 9094
      ToPort: 9094
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId

  MSKSecurityGroup9092:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MSKSecurityGroup
    Properties:
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      Description: Enable Self referencing Bootstrap servers Plaintext
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9092
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId

  MSKSecurityGroup9096:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MSKSecurityGroup
    Properties:
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      Description: Enable Self referencing SASL
      IpProtocol: tcp
      FromPort: 9096
      ToPort: 9096
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId

  MSKSecurityGroup9098:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MSKSecurityGroup
    Properties:
      GroupId: !GetAtt MSKSecurityGroup.GroupId
      Description: Enable Self referencing IAM
      IpProtocol: tcp
      FromPort: 9098
      ToPort: 9098
      SourceSecurityGroupId: !GetAtt MSKSecurityGroup.GroupId

  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties: 
      BrokerNodeGroupInfo: 
        ClientSubnets:
          - !Ref MskClusterPrivateSubnet1
          - !Ref MskClusterPrivateSubnet2
        SecurityGroups:
          - !GetAtt MSKSecurityGroup.GroupId
        InstanceType: !Ref InstanceType
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 50
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ClientAuthentication:
          Sasl:
            Iam:
              Enabled: True
      KafkaVersion: !Ref MSKKafkaVersion
      NumberOfBrokerNodes: 2
      EncryptionInfo:
        EncryptionInTransit:
          InCluster: true

Outputs:
  MSKCluster:
    Description: MSK Cluster details
    Value: !Ref MSKCluster
  ClusterName:
    Description: MSK Cluster Name
    Value: !Select [ 1, !Split ["/", !Ref MSKCluster]]
  ClusterId:
    Description: MSK Cluster Id
    Value: !Select [ 2, !Split ["/", !Ref MSKCluster]]
  MSKProducerSGID:
    Description: Kafka client SG ID
    Value: !GetAtt MSKProducerSG.GroupId

