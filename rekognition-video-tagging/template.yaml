AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An Amazon S3 bucket for the storing of video files. Upon uploading a new object, triggers an AWS Lambda function which consumes the event and begins the Rekognition job. The rekognition job is asynchronous, and publishes a message to an Amazon SNS topic, where another AWS Lambda function will be ready to retrieve the Amazon Rekognition results and upload to an Amazon DynamoDB table.

Resources:
  # S3 bucket to store video files from the user.
  VideoFileBucket:
    Type: AWS::S3::Bucket
  
  # Define the SNS Topics for Bluebank, Redbank, Greenbank - Transactions Warehouses
  VideoUploadTopic:
    Type: AWS::SNS::Topic

  # Define the DynamoDB table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Video"
          AttributeType: "S"
        - AttributeName: "Bucket"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Video"
          KeyType: HASH
        - AttributeName: "Bucket"
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: "VideoTags"

  # IAM Role for Rekognition to publish to SNS
  RekognitionToSNSRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: PublishToSNS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "sns:publish"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "rekognition.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  # Lambda Function to begin Amazon Rekognition's DetectLabels function.
  StartProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-start-processing-video-rekognition
      Runtime: python3.11
      Handler: src/lambda-start-processing-video-rekognition.lambda_handler
      MemorySize: 128
      Timeout: 10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: "*"
            - Effect: Allow
              Action:
                - "rekognition:StartLabelDetection"
              Resource: "*"
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource: !GetAtt RekognitionToSNSRole.Arn
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: VideoFileBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          snsTopicARN: !Ref VideoUploadTopic
          snsRole: !GetAtt RekognitionToSNSRole.Arn

  # Lambda Function to fetch results from the Amazon Rekognition service and push to DynamoDB.
  GetProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-get-processing-video-rekognition
      Runtime: python3.11
      Handler: src/lambda-get-processing-video-rekognition.lambda_handler
      MemorySize: 128
      Timeout: 10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 
                - "dynamodb:PutItem"
              Resource: !GetAtt DynamoDBTable.Arn
            - Effect: Allow
              Action:
                - "rekognition:GetLabelDetection"
              Resource: "*"
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref VideoUploadTopic
            SqsSubscription: true
      Environment:
        Variables:
          dynamoDBTableName: !Ref DynamoDBTable